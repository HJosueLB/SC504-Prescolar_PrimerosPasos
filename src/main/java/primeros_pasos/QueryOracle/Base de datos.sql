------------------------------------------------------------
-- Creación de tablas
------------------------------------------------------------
CREATE TABLE Rol (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) UNIQUE NOT NULL
);

CREATE TABLE UsuarioInterno (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    IdRol NUMBER NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL,
    FOREIGN KEY (IdRol) REFERENCES Rol(Id)
);

CREATE TABLE Profesor (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL
);

CREATE TABLE Grupo (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(10) UNIQUE NOT NULL,
    IdProfesor NUMBER NOT NULL,
    FOREIGN KEY (IdProfesor) REFERENCES Profesor(Id)
);

CREATE TABLE PadreDeFamilia (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL
);

CREATE TABLE Estudiante (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    IdPadre NUMBER NOT NULL,
    IdGrupo NUMBER,
    FOREIGN KEY (IdPadre) REFERENCES PadreDeFamilia(Id),
    FOREIGN KEY (IdGrupo) REFERENCES Grupo(Id)
);

CREATE TABLE Estatus (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(20) UNIQUE NOT NULL
);

CREATE TABLE Matricula (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IdEstudiante NUMBER NOT NULL,
    EnrollmentDate DATE DEFAULT SYSDATE NOT NULL,
    IdStatus NUMBER NOT NULL,
    FOREIGN KEY (IdEstudiante) REFERENCES Estudiante(Id),
    FOREIGN KEY (IdStatus) REFERENCES Estatus(Id)
);

CREATE TABLE Anuncio (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Title VARCHAR2(100) NOT NULL,
    Content CLOB NOT NULL,
    DatePosted DATE DEFAULT SYSDATE NOT NULL,
    IdGrupo NUMBER,
    IdUsuarioInterno NUMBER NOT NULL,
    FOREIGN KEY (IdGrupo) REFERENCES Grupo(Id),
    FOREIGN KEY (IdUsuarioInterno) REFERENCES UsuarioInterno(Id)
);

CREATE TABLE Evento (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion CLOB,
    Fecha DATE NOT NULL,
    Grupo VARCHAR(20)
);

CREATE TABLE Tarea (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Description VARCHAR2(200) NOT NULL,
    DueDate DATE NOT NULL,
    IdGrupo NUMBER NOT NULL,
    IdProfesor NUMBER NOT NULL,
    FOREIGN KEY (IdGrupo) REFERENCES Grupo(Id),
    FOREIGN KEY (IdProfesor) REFERENCES Profesor(Id)
);

------------------------------------------------------------
-- Inserción de datos
------------------------------------------------------------
INSERT INTO Rol (Nombre) VALUES ('Director');
INSERT INTO Rol (Nombre) VALUES ('Secretario');

INSERT INTO UsuarioInterno (FirstName, LastName, IdRol, Email, Password)
VALUES ('Miguel', 'Gómez', 1, 'miguel.gomez@prescolar_pp.com', 'password123');

INSERT INTO UsuarioInterno (FirstName, LastName, IdRol, Email, Password)
VALUES ('Viviana', 'Pérez', 2, 'viviana.perez@prescolar_pp.com', 'password123'); 

INSERT INTO Profesor (FirstName, LastName, Email, Password)
VALUES ('Lucía', 'Ramírez', 'lucia.ramirez@prescolar_pp.com', 'password123');

INSERT INTO Profesor (FirstName, LastName, Email, Password)
VALUES ('Fanny', 'Vargas', 'fanny.vargas@prescolar_pp.com', 'password123');

INSERT INTO Grupo (Nombre, IdProfesor)
VALUES ('A', 1); 

INSERT INTO Grupo (Nombre, IdProfesor)
VALUES ('B', 2); 

INSERT INTO PadreDeFamilia (FirstName, LastName, Email, Password)
VALUES ('Jessica', 'López', 'jessicalopez@gmail.com', 'password123');

INSERT INTO PadreDeFamilia (FirstName, LastName, Email, Password)
VALUES ('Ricardo', 'Martínez', 'pedromartinez@gmail.com', 'password123');

INSERT INTO Estudiante (FirstName, LastName, DateOfBirth, IdPadre, IdGrupo)
VALUES ('Sofia', 'Martínez', TO_DATE('2017-03-15', 'YYYY-MM-DD'), 2, 1);

INSERT INTO Estudiante (FirstName, LastName, DateOfBirth, IdPadre, IdGrupo)
VALUES ('Esteban', 'López', TO_DATE('2017-12-10', 'YYYY-MM-DD'), 1, 2);

INSERT INTO Estatus (Nombre) VALUES ('Cursando');
INSERT INTO Estatus (Nombre) VALUES ('Finalizado');

INSERT INTO Matricula (IdEstudiante, EnrollmentDate, IdStatus)
VALUES (1, TO_DATE('2024-02-12', 'YYYY-MM-DD'), 1); 

INSERT INTO Matricula (IdEstudiante, EnrollmentDate, IdStatus)
VALUES (2, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 1);

------------------------------------------------------------
-- Creación de procedimientos
------------------------------------------------------------

-- PROCEDIMIENTO DE AGREGAR TAREA.
CREATE OR REPLACE PROCEDURE ASIGNARTAREA (
    p_Description IN VARCHAR2,
    p_DueDate IN DATE,
    p_IdGrupo IN NUMBER,
    p_IdProfesor IN NUMBER
) AS
BEGIN
    INSERT INTO Tarea (Description, DueDate, IdGrupo, IdProfesor)
    VALUES (p_Description, p_DueDate, p_IdGrupo, p_IdProfesor);
END;
/

-- PROCEDIMIENTO DE AGREGAR EVENTO.
CREATE OR REPLACE PROCEDURE CREAREVENTO (
    p_Nombre IN VARCHAR2,
    p_Descripcion IN CLOB,
    p_Fecha IN DATE,
    p_Grupo IN VARCHAR2
) AS
BEGIN
    INSERT INTO Evento (Nombre, Descripcion, Fecha, Grupo)
    VALUES (p_Nombre, p_Descripcion, p_Fecha, p_Grupo);
END;
/

-- PROCEDIMIENTO DE AGREGAR ANUNCIO.
CREATE OR REPLACE PROCEDURE PUBLICARANUNCIO (
    p_Title IN VARCHAR2,
    p_Content IN CLOB,
    p_IdGrupo IN NUMBER,
    p_IdUsuarioInterno IN NUMBER
) AS
BEGIN
    INSERT INTO Anuncio (Title, Content, DatePosted, IdGrupo, IdUsuarioInterno)
    VALUES (p_Title, p_Content, SYSDATE, p_IdGrupo, p_IdUsuarioInterno);
END;
/

-- PROCEDIMIENTO REGISTRAR PADRE DE FAMILIA
CREATE OR REPLACE PROCEDURE REGISTRARPADRE (
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_Mail IN VARCHAR2,
    p_Password IN VARCHAR2
) AS
BEGIN
    INSERT INTO PadreDeFamilia (FirstName, LastName, Email, Password)
    VALUES (p_FirstName, p_LastName, p_Mail, p_Password);
END;
/

-- PROCEDIMIENTO REGISTRAR ESTUDIANTE
CREATE OR REPLACE PROCEDURE REGISTRARESTUDIANTE (
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_DateOfBirth IN DATE,
    p_IdPadre IN NUMBER,
    p_IdGrupo IN NUMBER
) AS
BEGIN
    INSERT INTO Estudiante (FirstName, LastName, DateOfBirth, IdPadre, IdGrupo)
    VALUES (p_FirstName, p_LastName, p_DateOfBirth, p_IdPadre, p_IdGrupo);
END;
/

-- PROCEDIMIENTO PARA OBTENER PROFESORES
CREATE OR REPLACE PROCEDURE OBTENERPROFESORES (
    p_profesores OUT SYS_REFCURSOR  
) AS
BEGIN
    OPEN p_profesores FOR
        SELECT Id, FirstName, LastName FROM Profesor;
END;
/

-- PROCEDIMIENTO PARA OBTENER GRUPOS
CREATE OR REPLACE PROCEDURE OBTENERGRUPOS (
    p_grupo OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_grupo FOR
        SELECT Id, Nombre FROM Grupo; 
END;
/

-- PROCEDIMIENTO PARA ACTUALIZAR TAREA
CREATE OR REPLACE PROCEDURE ACTUALIZARTAREA (
    p_codigoTarea IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_fechaLimite IN DATE,
    p_grupo IN VARCHAR2,
    p_profesor IN VARCHAR2 
)
IS
BEGIN
    UPDATE Tarea
    SET
        Description = p_descripcion,
        DueDate = p_fechaLimite,
        IdGrupo = (SELECT Id FROM Grupo WHERE Nombre = p_grupo),  
        IdProfesor = (SELECT Id FROM Profesor WHERE FirstName || ' ' || LastName = p_profesor)  
    WHERE
        Id = p_codigoTarea;   
END;
/

-- PROCEDIMIENTO PARA ELIMINAR TAREA
CREATE OR REPLACE PROCEDURE ELIMINARTAREA (
    p_codigoTarea IN NUMBER
)
IS
BEGIN
    DELETE FROM Tarea
    WHERE Id = p_codigoTarea;
END;
/

-- PROCEDIMIENTO PARA OBTENER TAREA
CREATE OR REPLACE PROCEDURE OBTENERTAREA(
    p_id IN NUMBER,
    p_result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_result FOR
        SELECT t.Id AS "Código_Tarea", 
               t.Description AS "Descripcion", 
               t.DueDate AS "Fecha_Limite", 
               g.Nombre AS "Grupo",  
               p.FirstName || ' ' || p.LastName AS "Nombre_Profesor" 
        FROM Tarea t
        JOIN Grupo g ON t.IdGrupo = g.Id
        JOIN Profesor p ON t.IdProfesor = p.Id
        WHERE t.Id = p_id;  
END;
/

------------------------------------------------------------
-- Creación de Vistas
------------------------------------------------------------

-- VISTA DE ESTUDIANTES
CREATE OR REPLACE VIEW V_ESTUDIANTES_GRUPO AS
SELECT 
    e.Id AS Código_Estudiante,
    e.FirstName AS Nombre,
    e.LastName AS Apellido,
    g.Nombre AS Grupo
FROM Estudiante e
LEFT JOIN Grupo g ON e.IdGrupo = g.Id;

-- VISTA DE PROFESORES
CREATE OR REPLACE VIEW V_PROFESORES_GRUPOS AS
SELECT 
    p.Id AS Código_Profesor,
    p.FirstName AS Nombre,
    p.LastName AS Apellido,
    g.Nombre AS Grupo
FROM Profesor p
LEFT JOIN Grupo g ON p.Id = g.IdProfesor;

--VISTA DE ANUNCIOS
CREATE OR REPLACE VIEW V_ANUNCIOS_GRUPO AS
SELECT 
    a.Id AS Código_Anuncio,
    a.Title AS Titulo_Anuncio,
    a.DatePosted AS Fecha_Publicacion,
    a.Content AS Contenido_Anuncio,
    g.Nombre AS Nombre_Grupo
FROM Anuncio a
LEFT JOIN Grupo g ON a.IdGrupo = g.Id;

-- VISTA DE EVENTOS
CREATE OR REPLACE VIEW V_EVENTOS AS
SELECT 
    e.Id AS Código_Evento,
    e.Nombre AS Nombre_Evento,
    e.Fecha AS FechaEvento,
    e.Grupo AS Asistencia
FROM Evento e;

-- VISTA DE PADRES
CREATE OR REPLACE VIEW V_PADRES_ESTUDIANTES AS
SELECT 
    e.Id AS Código_Estudiante,
    e.FirstName AS Nombre,
    e.LastName AS Apellido,
    p.FirstName AS Nombre_Padre,
    p.LastName AS Apellido_Padre
FROM Estudiante e
LEFT JOIN PadreDeFamilia p ON e.IdPadre = p.Id;

-- VISTA DE MATRICULAS
CREATE OR REPLACE VIEW V_MATRICULAS_ESTUDIANTES AS
SELECT 
    m.Id AS Código_Matricula,
    e.FirstName AS Nombre_Estudiante,
    e.LastName AS Apellido,
    m.EnrollmentDate AS Fecha_Matricula,
    s.Nombre AS Estado_Matricula
FROM Matricula m
LEFT JOIN Estudiante e ON m.IdEstudiante = e.Id
LEFT JOIN Estatus s ON m.IdStatus = s.Id;

-- VISTA ESTUDIANTES ACTIVOS
CREATE OR REPLACE VIEW V_ESTUDIANTES_ACTIVOS AS
SELECT 
    e.Id AS Código_Estudiante,
    e.FirstName AS Nombre,
    e.LastName AS Apellido,
    m.EnrollmentDate AS Fecha_Matricula
FROM Estudiante e
LEFT JOIN Matricula m ON e.Id = m.IdEstudiante
WHERE m.IdStatus = (SELECT Id FROM Estatus WHERE Nombre = 'Cursando');

-- VISTA DE TAREAS POR GRUPO
CREATE OR REPLACE VIEW V_TAREAS_GRUPOS AS
SELECT 
    t.Id AS Código_Tarea,
    t.Description AS Descripcion,
    t.DueDate AS Fecha_Limite,
    g.Nombre AS Grupo,
    p.FirstName || ' ' || p.LastName AS Nombre_Profesor
FROM Tarea t
LEFT JOIN Grupo g ON t.IdGrupo = g.Id
LEFT JOIN Profesor p ON t.IdProfesor = p.Id;


--------------------------
--TRIGGERS
-------------------------
--1. Trigger para actualizar automáticamente el estado de la matrícula
--Este trigger cambia el estado de la matrícula de un estudiante a "Finalizado" automáticamente si la fecha actual excede la fecha límite de su grupo.
------------------------

CREATE OR REPLACE TRIGGER TRG_UPDATE_MATRICULA_STATUS
AFTER INSERT OR UPDATE ON Estudiante
FOR EACH ROW
DECLARE
    grupo_deadline DATE;
BEGIN
    -- Obtener la fecha límite del grupo asociado
    SELECT t.DueDate
    INTO grupo_deadline
    FROM Tarea t
    WHERE t.IdGrupo = :NEW.IdGrupo
    AND t.DueDate = (SELECT MAX(DueDate) FROM Tarea WHERE IdGrupo = :NEW.IdGrupo);
    
    -- Actualizar estado de matrícula si aplica
    IF SYSDATE > grupo_deadline THEN
        UPDATE Matricula
        SET IdStatus = (SELECT Id FROM Estatus WHERE Nombre = 'Finalizado')
        WHERE IdEstudiante = :NEW.Id;
    END IF;
END;
/

-----------------------------
--2. Trigger para evitar la duplicación de correos electrónicos
--Este trigger asegura que no se puedan insertar registros en tablas con columnas Email duplicadas, incluso entre diferentes tablas.
------------------
CREATE OR REPLACE TRIGGER TRG_UNIQUE_EMAIL
BEFORE INSERT OR UPDATE ON UsuarioInterno
FOR EACH ROW
DECLARE
    count_emails NUMBER;
BEGIN
    -- Verificar duplicados en todas las tablas
    SELECT COUNT(*) INTO count_emails
    FROM (
        SELECT Email FROM UsuarioInterno
        UNION ALL
        SELECT Email FROM Profesor
        UNION ALL
        SELECT Email FROM PadreDeFamilia
    )
    WHERE Email = :NEW.Email;
    
    IF count_emails > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El correo electrónico ya está en uso.');
    END IF;
END;
/

--------------------------------
--3. Trigger para mantener el historial de actualizaciones de estudiantes
--Este trigger registra cambios en la tabla Estudiante en una tabla de auditoría.
----------------------------------
CREATE TABLE Historial_Estudiante (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IdEstudiante NUMBER,
    CampoModificado VARCHAR2(50),
    ValorAnterior VARCHAR2(100),
    FechaModificacion DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRG_HISTORIAL_ESTUDIANTE
BEFORE UPDATE ON Estudiante
FOR EACH ROW
BEGIN
    IF :OLD.FirstName <> :NEW.FirstName THEN
        INSERT INTO Historial_Estudiante (IdEstudiante, CampoModificado, ValorAnterior)
        VALUES (:OLD.Id, 'FirstName', :OLD.FirstName);
    END IF;
    IF :OLD.LastName <> :NEW.LastName THEN
        INSERT INTO Historial_Estudiante (IdEstudiante, CampoModificado, ValorAnterior)
        VALUES (:OLD.Id, 'LastName', :OLD.LastName);
    END IF;
    IF :OLD.DateOfBirth <> :NEW.DateOfBirth THEN
        INSERT INTO Historial_Estudiante (IdEstudiante, CampoModificado, ValorAnterior)
        VALUES (:OLD.Id, 'DateOfBirth', TO_CHAR(:OLD.DateOfBirth, 'YYYY-MM-DD'));
    END IF;
END;
/

--------------------------------------------------------------
--4. Trigger para asignar automáticamente un grupo al registrar estudiantes
--Este trigger asigna automáticamente el grupo con menos estudiantes al registrar un nuevo estudiante.
------------------------------------------------------------

CREATE OR REPLACE TRIGGER TRG_ASIGNAR_GRUPO
BEFORE INSERT ON Estudiante
FOR EACH ROW
DECLARE
    grupo_minimo NUMBER;
BEGIN
    SELECT Id INTO grupo_minimo
    FROM Grupo
    WHERE Id = (
        SELECT IdGrupo
        FROM (
            SELECT IdGrupo, COUNT(*) AS Total
            FROM Estudiante
            GROUP BY IdGrupo
            ORDER BY Total ASC
        ) WHERE ROWNUM = 1
    );
    :NEW.IdGrupo := grupo_minimo;
END;
/

--------------------------------
--5. Trigger para notificar cambios en tareas
--Este trigger registra en una tabla de notificaciones cuando se modifica o elimina una tarea.
--------------------------------
CREATE TABLE Notificaciones (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TipoAccion VARCHAR2(20),
    Mensaje VARCHAR2(200),
    FechaHora DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER TRG_NOTIFICAR_TAREA
AFTER UPDATE OR DELETE ON Tarea
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        INSERT INTO Notificaciones (TipoAccion, Mensaje)
        VALUES ('Actualización', 'La tarea con ID ' || :OLD.Id || ' fue actualizada.');
    ELSIF DELETING THEN
        INSERT INTO Notificaciones (TipoAccion, Mensaje)
        VALUES ('Eliminación', 'La tarea con ID ' || :OLD.Id || ' fue eliminada.');
    END IF;
END;
/

------------------------------------------------------------------
--------------------------Funciones-------------------------------
------------------------------------------------------------------
 
--1 Función para obtener el promedio de estudiantes por grupo
CREATE OR REPLACE FUNCTION PROMEDIO_ESTUDIANTES_GRUPO
RETURN NUMBER
IS
    promedio NUMBER;
BEGIN
    SELECT AVG(total_estudiantes) INTO promedio
    FROM (
        SELECT COUNT(*) AS total_estudiantes
        FROM Estudiante
        GROUP BY IdGrupo
    );
    RETURN promedio;
END;
/
 
 
--2 Función para obtener la cantidad de tareas pendientes por grupo
 
CREATE OR REPLACE FUNCTION CANTIDAD_TAREAS_PENDIENTES (p_IdGrupo IN NUMBER)
RETURN NUMBER
IS
    cantidad NUMBER;
BEGIN
    SELECT COUNT(*) INTO cantidad
    FROM Tarea
    WHERE IdGrupo = p_IdGrupo
      AND DueDate > SYSDATE; -- Tareas pendientes
    RETURN cantidad;
END;
/
 
 
--3 Función para validar correos electrónicos
 
CREATE OR REPLACE FUNCTION VALIDAR_CORREO (p_Email IN VARCHAR2)
RETURN NUMBER
IS
    count_emails NUMBER;
BEGIN
    SELECT COUNT(*) INTO count_emails
    FROM (
        SELECT Email FROM UsuarioInterno
        UNION ALL
        SELECT Email FROM Profesor
        UNION ALL
        SELECT Email FROM PadreDeFamilia
    )
    WHERE Email = p_Email;
 
    RETURN count_emails;
END;
/
 
--4 Función para calcular la edad promedio de los estudiantes
 
CREATE OR REPLACE FUNCTION EDAD_PROMEDIO_ESTUDIANTES
RETURN NUMBER
IS
    promedio_edad NUMBER;
BEGIN
    SELECT AVG(TRUNC(MONTHS_BETWEEN(SYSDATE, DateOfBirth) / 12)) INTO promedio_edad
    FROM Estudiante;
    RETURN promedio_edad;
END;
/
 
-- 5 Función para contar anuncios por usuario interno
 
CREATE OR REPLACE FUNCTION CONTAR_ANUNCIOS_USUARIO (p_IdUsuario IN NUMBER)
RETURN NUMBER
IS
    total_anuncios NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_anuncios
    FROM Anuncio
    WHERE IdUsuarioInterno = p_IdUsuario;
    RETURN total_anuncios;
END;
/
 
 
--invocar las funciones
--Para obtener el promedio de estudiantes por grupo:
SELECT PROMEDIO_ESTUDIANTES_GRUPO() FROM DUAL;
 
--Para contar tareas pendientes de un grupo:
SELECT CANTIDAD_TAREAS_PENDIENTES(1) FROM DUAL;
 
--Validar si un correo está registrado:
SELECT VALIDAR_CORREO('example@mail.com') FROM DUAL;
 
--Para calcular la edad promedio:
SELECT EDAD_PROMEDIO_ESTUDIANTES() FROM DUAL;
 
--Para contar los anuncios de un usuario interno:
SELECT CONTAR_ANUNCIOS_USUARIO(1) FROM DUAL;

------------------------------------------------------------------------------------------
-- TRIGGERS - AUDITORIA
------------------------------------------------------------------------------------------

-- TABLA DE AUDITORIA DE TAREAS
CREATE TABLE AuditoriaTareas (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IdTarea NUMBER NOT NULL,
    Accion VARCHAR2(20) NOT NULL,
    FechaHora TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    Usuario VARCHAR2(100), 
    DatosPrevios CLOB, 
    DatosNuevos CLOB 
);

--TRIGGER DE INSERTAR TAREA
CREATE OR REPLACE TRIGGER TRG_Insert_Tareas
AFTER INSERT ON Tarea
FOR EACH ROW
BEGIN
    INSERT INTO AuditoriaTareas (IdTarea, Accion, FechaHora, Usuario, DatosPrevios, DatosNuevos)
    VALUES (:NEW.Id, 'INSERT', SYSTIMESTAMP, USER, NULL, TO_CLOB(:NEW.Description || ', ' || :NEW.DueDate || ', ' || :NEW.IdGrupo || ', ' || :NEW.IdProfesor));
END;
/

--TRIGGER DE ACTUALIZAR TAREA
CREATE OR REPLACE TRIGGER TRG_Update_Tareas
AFTER UPDATE ON Tarea
FOR EACH ROW
BEGIN
    INSERT INTO AuditoriaTareas (IdTarea, Accion, FechaHora, Usuario, DatosPrevios, DatosNuevos)
    VALUES (:OLD.Id, 'UPDATE', SYSTIMESTAMP, USER, TO_CLOB(:OLD.Description || ', ' || :OLD.DueDate || ', ' || :OLD.IdGrupo || ', ' || :OLD.IdProfesor), TO_CLOB(:NEW.Description || ', ' || :NEW.DueDate || ', ' || :NEW.IdGrupo || ', ' || :NEW.IdProfesor));
END;
/

--TRIGGER DE ELIMINAR TAREA
CREATE OR REPLACE TRIGGER TRG_Delete_Tareas
AFTER DELETE ON Tarea
FOR EACH ROW
BEGIN
    INSERT INTO AuditoriaTareas (IdTarea, Accion, FechaHora, Usuario, DatosPrevios, DatosNuevos)
    VALUES (:OLD.Id, 'DELETE', SYSTIMESTAMP, USER, TO_CLOB(:OLD.Description || ', ' || :OLD.DueDate || ', ' || :OLD.IdGrupo || ', ' || :OLD.IdProfesor), NULL);
END;
/

